[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AuthRepository",
        "importPath": "app.domain.auth.auth_repository",
        "description": "app.domain.auth.auth_repository",
        "isExtraImport": true,
        "detail": "app.domain.auth.auth_repository",
        "documentation": {}
    },
    {
        "label": "AuthRepository",
        "importPath": "app.domain.auth.auth_repository",
        "description": "app.domain.auth.auth_repository",
        "isExtraImport": true,
        "detail": "app.domain.auth.auth_repository",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "app.infrastructure.auth.password_hasher",
        "description": "app.infrastructure.auth.password_hasher",
        "isExtraImport": true,
        "detail": "app.infrastructure.auth.password_hasher",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "app.infrastructure.auth.password_hasher",
        "description": "app.infrastructure.auth.password_hasher",
        "isExtraImport": true,
        "detail": "app.infrastructure.auth.password_hasher",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "app.infrastructure.auth.password_hasher",
        "description": "app.infrastructure.auth.password_hasher",
        "isExtraImport": true,
        "detail": "app.infrastructure.auth.password_hasher",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "app.infrastructure.auth.password_hasher",
        "description": "app.infrastructure.auth.password_hasher",
        "isExtraImport": true,
        "detail": "app.infrastructure.auth.password_hasher",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitud",
        "importPath": "app.domain.solicitud.respuesta_solicitud",
        "description": "app.domain.solicitud.respuesta_solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.respuesta_solicitud",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitud",
        "importPath": "app.domain.solicitud.respuesta_solicitud",
        "description": "app.domain.solicitud.respuesta_solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.respuesta_solicitud",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitud",
        "importPath": "app.domain.solicitud.respuesta_solicitud",
        "description": "app.domain.solicitud.respuesta_solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.respuesta_solicitud",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudRepository",
        "importPath": "app.domain.solicitud.respuesta_solicitud_repository",
        "description": "app.domain.solicitud.respuesta_solicitud_repository",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.respuesta_solicitud_repository",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudRepository",
        "importPath": "app.domain.solicitud.respuesta_solicitud_repository",
        "description": "app.domain.solicitud.respuesta_solicitud_repository",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.respuesta_solicitud_repository",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Solicitud",
        "importPath": "app.domain.solicitud.solicitud",
        "description": "app.domain.solicitud.solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.solicitud",
        "documentation": {}
    },
    {
        "label": "Solicitud",
        "importPath": "app.domain.solicitud.solicitud",
        "description": "app.domain.solicitud.solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.solicitud",
        "documentation": {}
    },
    {
        "label": "Solicitud",
        "importPath": "app.domain.solicitud.solicitud",
        "description": "app.domain.solicitud.solicitud",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.solicitud",
        "documentation": {}
    },
    {
        "label": "SolicitudRepository",
        "importPath": "app.domain.solicitud.solicitud_repository",
        "description": "app.domain.solicitud.solicitud_repository",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.solicitud_repository",
        "documentation": {}
    },
    {
        "label": "SolicitudRepository",
        "importPath": "app.domain.solicitud.solicitud_repository",
        "description": "app.domain.solicitud.solicitud_repository",
        "isExtraImport": true,
        "detail": "app.domain.solicitud.solicitud_repository",
        "documentation": {}
    },
    {
        "label": "TipoUsuarioRepository",
        "importPath": "app.domain.user.typeUser_repository",
        "description": "app.domain.user.typeUser_repository",
        "isExtraImport": true,
        "detail": "app.domain.user.typeUser_repository",
        "documentation": {}
    },
    {
        "label": "TipoUsuarioRepository",
        "importPath": "app.domain.user.typeUser_repository",
        "description": "app.domain.user.typeUser_repository",
        "isExtraImport": true,
        "detail": "app.domain.user.typeUser_repository",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "importPath": "app.domain.user.type_user",
        "description": "app.domain.user.type_user",
        "isExtraImport": true,
        "detail": "app.domain.user.type_user",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "importPath": "app.domain.user.type_user",
        "description": "app.domain.user.type_user",
        "isExtraImport": true,
        "detail": "app.domain.user.type_user",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "importPath": "app.domain.user.type_user",
        "description": "app.domain.user.type_user",
        "isExtraImport": true,
        "detail": "app.domain.user.type_user",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.domain.user.usuario_repository",
        "description": "app.domain.user.usuario_repository",
        "isExtraImport": true,
        "detail": "app.domain.user.usuario_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.domain.user.usuario_repository",
        "description": "app.domain.user.usuario_repository",
        "isExtraImport": true,
        "detail": "app.domain.user.usuario_repository",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.domain.user.usuario",
        "description": "app.domain.user.usuario",
        "isExtraImport": true,
        "detail": "app.domain.user.usuario",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.domain.user.usuario",
        "description": "app.domain.user.usuario",
        "isExtraImport": true,
        "detail": "app.domain.user.usuario",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.domain.user.usuario",
        "description": "app.domain.user.usuario",
        "isExtraImport": true,
        "detail": "app.domain.user.usuario",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Auth",
        "importPath": "app.domain.auth.auth",
        "description": "app.domain.auth.auth",
        "isExtraImport": true,
        "detail": "app.domain.auth.auth",
        "documentation": {}
    },
    {
        "label": "Auth",
        "importPath": "app.domain.auth.auth",
        "description": "app.domain.auth.auth",
        "isExtraImport": true,
        "detail": "app.domain.auth.auth",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "isExtraImport": true,
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "isExtraImport": true,
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "flask_mail",
        "description": "flask_mail",
        "isExtraImport": true,
        "detail": "flask_mail",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "app.infrastructure.email",
        "description": "app.infrastructure.email",
        "isExtraImport": true,
        "detail": "app.infrastructure.email",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "app.infrastructure.email",
        "description": "app.infrastructure.email",
        "isExtraImport": true,
        "detail": "app.infrastructure.email",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "isExtraImport": true,
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "app.infrastructure.models.user_model",
        "description": "app.infrastructure.models.user_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.user_model",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "importPath": "app.infrastructure.models.user_model",
        "description": "app.infrastructure.models.user_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.user_model",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "app.infrastructure.models.user_model",
        "description": "app.infrastructure.models.user_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.user_model",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudModel",
        "importPath": "app.infrastructure.models.respuesta_solicitud_model",
        "description": "app.infrastructure.models.respuesta_solicitud_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.respuesta_solicitud_model",
        "documentation": {}
    },
    {
        "label": "SolicitudModel",
        "importPath": "app.infrastructure.models.solicitud_model",
        "description": "app.infrastructure.models.solicitud_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.solicitud_model",
        "documentation": {}
    },
    {
        "label": "EspecialidadModel",
        "importPath": "app.infrastructure.models.especialidad_model",
        "description": "app.infrastructure.models.especialidad_model",
        "isExtraImport": true,
        "detail": "app.infrastructure.models.especialidad_model",
        "documentation": {}
    },
    {
        "label": "AuthRepositoryImpl",
        "importPath": "app.infrastructure.repositories.auth.auth_repository_impl",
        "description": "app.infrastructure.repositories.auth.auth_repository_impl",
        "isExtraImport": true,
        "detail": "app.infrastructure.repositories.auth.auth_repository_impl",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "importPath": "app.application.auth.login_user",
        "description": "app.application.auth.login_user",
        "isExtraImport": true,
        "detail": "app.application.auth.login_user",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "isExtraImport": true,
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "isLoginReady",
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "isExtraImport": true,
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "isExtraImport": true,
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "isExtraImport": true,
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "SolicitudRepositoryImpl",
        "importPath": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "description": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "isExtraImport": true,
        "detail": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "documentation": {}
    },
    {
        "label": "SolicitudService",
        "importPath": "app.application.solicitud.solicitud_services",
        "description": "app.application.solicitud.solicitud_services",
        "isExtraImport": true,
        "detail": "app.application.solicitud.solicitud_services",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudRepositoryImpl",
        "importPath": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "description": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "isExtraImport": true,
        "detail": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudService",
        "importPath": "app.application.solicitud.respuesta_solicitud_service",
        "description": "app.application.solicitud.respuesta_solicitud_service",
        "isExtraImport": true,
        "detail": "app.application.solicitud.respuesta_solicitud_service",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.infrastructure.email.mailer",
        "description": "app.infrastructure.email.mailer",
        "isExtraImport": true,
        "detail": "app.infrastructure.email.mailer",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "TipoUsuarioRepositoryImpl",
        "importPath": "app.infrastructure.repositories.user.usuario_repository_impl",
        "description": "app.infrastructure.repositories.user.usuario_repository_impl",
        "isExtraImport": true,
        "detail": "app.infrastructure.repositories.user.usuario_repository_impl",
        "documentation": {}
    },
    {
        "label": "UserRepositoryImpl",
        "importPath": "app.infrastructure.repositories.user.usuario_repository_impl",
        "description": "app.infrastructure.repositories.user.usuario_repository_impl",
        "isExtraImport": true,
        "detail": "app.infrastructure.repositories.user.usuario_repository_impl",
        "documentation": {}
    },
    {
        "label": "TypeUserServices",
        "importPath": "app.application.user.user_services",
        "description": "app.application.user.user_services",
        "isExtraImport": true,
        "detail": "app.application.user.user_services",
        "documentation": {}
    },
    {
        "label": "UserServices",
        "importPath": "app.application.user.user_services",
        "description": "app.application.user.user_services",
        "isExtraImport": true,
        "detail": "app.application.user.user_services",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "isExtraImport": true,
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "user_bp",
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "isExtraImport": true,
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "solicitudes_bp",
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "isExtraImport": true,
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Login-DDD-2\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Login-DDD-2\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Login-DDD-2\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Login-DDD-2\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Login-DDD-2\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "kind": 6,
        "importPath": "app.application.auth.login_user",
        "description": "app.application.auth.login_user",
        "peekOfCode": "class LoginUser:\n    def __init__(self, user_repository: AuthRepository, password_hasher: PasswordHasher):\n        self.user_repository = user_repository\n        self.password_hasher = password_hasher\n    def execute(self, username: str, password: str): \n        # Buscar usuario por su nombre de usuario (login)\n        user = self.user_repository.get_by_username(username)\n        if user is None:\n            raise ValueError(\"Usuario no encontrado.\")\n        # Verificar la contraseña (hasheada)",
        "detail": "app.application.auth.login_user",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudService",
        "kind": 6,
        "importPath": "app.application.solicitud.respuesta_solicitud_service",
        "description": "app.application.solicitud.respuesta_solicitud_service",
        "peekOfCode": "class RespuestaSolicitudService:\n    def __init__(self, repository: RespuestaSolicitudRepository):\n        self.repository = repository\n    def listar_por_estado(self, estado_solicitud_id: int) -> List[RespuestaSolicitud]:\n        return self.repository.listar_por_estado(estado_solicitud_id)",
        "detail": "app.application.solicitud.respuesta_solicitud_service",
        "documentation": {}
    },
    {
        "label": "SolicitudService",
        "kind": 6,
        "importPath": "app.application.solicitud.solicitud_services",
        "description": "app.application.solicitud.solicitud_services",
        "peekOfCode": "class SolicitudService:\n    def __init__(self, repository: SolicitudRepository):\n        self.repository = repository\n    def listar_filtrado(\n        self,\n        nombre: Optional[str] = None,\n        fecha_inicio: Optional[datetime] = None,\n        fecha_fin: Optional[datetime] = None,\n        atendidos:Optional[bool]= None,\n        page: int = 1,",
        "detail": "app.application.solicitud.solicitud_services",
        "documentation": {}
    },
    {
        "label": "TypeUserServices",
        "kind": 6,
        "importPath": "app.application.user.user_services",
        "description": "app.application.user.user_services",
        "peekOfCode": "class TypeUserServices:\n    def __init__(self, tipo_usuario_repository: TipoUsuarioRepository):\n        self.tipo_usuario_repository = tipo_usuario_repository\n    def execute(self) -> List[TipoUsuario]:\n        return self.tipo_usuario_repository.get_all()\nclass UserServices:\n    def __init__(\n        self,\n        user_repository: UserRepository,\n        password_hasher: PasswordHasher",
        "detail": "app.application.user.user_services",
        "documentation": {}
    },
    {
        "label": "UserServices",
        "kind": 6,
        "importPath": "app.application.user.user_services",
        "description": "app.application.user.user_services",
        "peekOfCode": "class UserServices:\n    def __init__(\n        self,\n        user_repository: UserRepository,\n        password_hasher: PasswordHasher\n    ):\n        self.user_repository = user_repository\n        self.password_hasher = password_hasher\n    # Registrar un nuevo usuario\n    def register_user(",
        "detail": "app.application.user.user_services",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "peekOfCode": "class Settings:\n    SQLALCHEMY_DATABASE_URL = os.getenv(\"DATABASE_URL\")\n    SMTP_HOST = os.getenv(\"SMTP_HOST\", \"\")\n    SMTP_PORT = int(os.getenv(\"SMTP_PORT\", \"587\"))\n    SMTP_USER = os.getenv(\"SMTP_USER\", \"\")\n    SMTP_PASS = os.getenv(\"SMTP_PASS\", \"\")\n    SMTP_FROM = os.getenv(\"SMTP_FROM\", SMTP_USER)\n    SMTP_USE_TLS = os.getenv(\"SMTP_USE_TLS\", \"true\").lower() == \"true\"\nsettings = Settings()",
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "login_required",
        "kind": 2,
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "peekOfCode": "def login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if session.get(\"user_id\") is None:\n            flash(\"Debes iniciar sesión primero.\")\n            return redirect(url_for(\"auth.login\")) \n        return f(*args, **kwargs)\n    return decorated_function\ndef isLoginReady(f):\n    @wraps(f)",
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "isLoginReady",
        "kind": 2,
        "importPath": "app.decorators.protection",
        "description": "app.decorators.protection",
        "peekOfCode": "def isLoginReady(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if session.get(\"user_id\") is not None:\n            flash(\"Ya iniciaste sesion.\")\n            return redirect(url_for(\"auth.dashboard\"))  \n        return f(*args, **kwargs)\n    return decorated_function",
        "detail": "app.decorators.protection",
        "documentation": {}
    },
    {
        "label": "Auth",
        "kind": 6,
        "importPath": "app.domain.auth.auth",
        "description": "app.domain.auth.auth",
        "peekOfCode": "class Auth:\n    usuario_id: int\n    usuario: str               \n    contrasena: str",
        "detail": "app.domain.auth.auth",
        "documentation": {}
    },
    {
        "label": "AuthRepository",
        "kind": 6,
        "importPath": "app.domain.auth.auth_repository",
        "description": "app.domain.auth.auth_repository",
        "peekOfCode": "class AuthRepository(ABC):\n    @abstractmethod\n    def get_by_username(self, username: str) -> Optional[Auth]:\n        pass\n    # @abstractmethod\n    # def create_user(self, user: User) -> User:\n    #     pass\n    # @abstractmethod|\n    # def save(self, user: User) -> User:\n    #     pass",
        "detail": "app.domain.auth.auth_repository",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitud",
        "kind": 6,
        "importPath": "app.domain.solicitud.respuesta_solicitud",
        "description": "app.domain.solicitud.respuesta_solicitud",
        "peekOfCode": "class RespuestaSolicitud:\n    respuesta_solicitud_id: int\n    nombre: str\n    respuesta: str\n    estado_solicitud_id: int\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n    estado: Optional[bool] = True",
        "detail": "app.domain.solicitud.respuesta_solicitud",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudRepository",
        "kind": 6,
        "importPath": "app.domain.solicitud.respuesta_solicitud_repository",
        "description": "app.domain.solicitud.respuesta_solicitud_repository",
        "peekOfCode": "class RespuestaSolicitudRepository(ABC):\n    @abstractmethod\n    def listar_por_estado(self, estado_solicitud_id: int) -> List[RespuestaSolicitud]:\n        pass",
        "detail": "app.domain.solicitud.respuesta_solicitud_repository",
        "documentation": {}
    },
    {
        "label": "Solicitud",
        "kind": 6,
        "importPath": "app.domain.solicitud.solicitud",
        "description": "app.domain.solicitud.solicitud",
        "peekOfCode": "class Solicitud:\n    jid_id: int\n    especialidad_id: int\n    nombres: str\n    tipo_documento_id: int\n    numero_documento: str\n    telefono: str\n    email: str\n    continuador: bool\n    sis: bool",
        "detail": "app.domain.solicitud.solicitud",
        "documentation": {}
    },
    {
        "label": "SolicitudRepository",
        "kind": 6,
        "importPath": "app.domain.solicitud.solicitud_repository",
        "description": "app.domain.solicitud.solicitud_repository",
        "peekOfCode": "class SolicitudRepository(ABC):\n    @abstractmethod\n    def listar_filtrado(\n        self,\n        nombre: Optional[str] = None,\n        fecha_inicio: Optional[datetime] = None,\n        fecha_fin: Optional[datetime] = None,\n        atendidos:Optional[bool] = None,\n        page: int = 1,\n        per_page: int = 10,",
        "detail": "app.domain.solicitud.solicitud_repository",
        "documentation": {}
    },
    {
        "label": "TipoUsuarioRepository",
        "kind": 6,
        "importPath": "app.domain.user.typeUser_repository",
        "description": "app.domain.user.typeUser_repository",
        "peekOfCode": "class TipoUsuarioRepository(ABC):\n    @abstractmethod\n    def get_all(self) -> List[TipoUsuario]:\n        pass",
        "detail": "app.domain.user.typeUser_repository",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "kind": 6,
        "importPath": "app.domain.user.type_user",
        "description": "app.domain.user.type_user",
        "peekOfCode": "class TipoUsuario:\n    tipo_usuario_id: int\n    nombre: str",
        "detail": "app.domain.user.type_user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.domain.user.usuario",
        "description": "app.domain.user.usuario",
        "peekOfCode": "class User:\n    usuario: str               \n    contrasena: str           \n    nombres: str\n    ap_paterno: str\n    ap_materno: str\n    tipo_usuario_id: int\n    estado: int = 1\n    usuario_id: Optional[int] = None\n    estado:Optional[bool]=True",
        "detail": "app.domain.user.usuario",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.domain.user.usuario_repository",
        "description": "app.domain.user.usuario_repository",
        "peekOfCode": "class UserRepository(ABC):\n     @abstractmethod\n     def create_user(self, user: User) -> User:\n        pass",
        "detail": "app.domain.user.usuario_repository",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "kind": 6,
        "importPath": "app.infrastructure.auth.password_hasher",
        "description": "app.infrastructure.auth.password_hasher",
        "peekOfCode": "class PasswordHasher:\n    def hash(self, password: str) -> str:\n        \"\"\"Genera el hash SHA-256 de la contraseña.\"\"\"\n        return hashlib.sha256(password.encode(\"utf-8\")).hexdigest()\n    def verify(self, password: str, hashed_password: str) -> bool:\n        \"\"\"Verifica si el hash coincide con el guardado.\"\"\"\n        return self.hash(password) == hashed_password",
        "detail": "app.infrastructure.auth.password_hasher",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "peekOfCode": "engine = create_engine(\n    settings.SQLALCHEMY_DATABASE_URL,\n    echo=False,\n    future=True\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.infrastructure.db.connection",
        "description": "app.infrastructure.db.connection",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.infrastructure.db.connection",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "app.infrastructure.email.mailer",
        "description": "app.infrastructure.email.mailer",
        "peekOfCode": "def send_email(to: str, subject: str, body: str, image_data: str | None = None) -> None:\n    msg = Message(subject=subject, recipients=[to], body=body)\n       # Si viene una imagen como dataURL, la adjuntamos\n    if image_data and image_data.startswith(\"data:\"):\n        header, b64 = image_data.split(\",\", 1)\n        m = re.match(r\"data:(.*?);base64\", header)\n        mime = m.group(1) if m else \"application/octet-stream\"\n        ext = (mime.split(\"/\")[-1] or \"bin\")\n        data = base64.b64decode(b64)\n        msg.attach(filename=f\"adjunto.{ext}\", content_type=mime, data=data)",
        "detail": "app.infrastructure.email.mailer",
        "documentation": {}
    },
    {
        "label": "EspecialidadModel",
        "kind": 6,
        "importPath": "app.infrastructure.models.especialidad_model",
        "description": "app.infrastructure.models.especialidad_model",
        "peekOfCode": "class EspecialidadModel(Base):\n    __tablename__ = \"tbl_especialidad\"  # nombre real de tu tabla en la BD\n    especialidad_id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(255), nullable=False)\n    estado = Column(Boolean, default=True)",
        "detail": "app.infrastructure.models.especialidad_model",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudModel",
        "kind": 6,
        "importPath": "app.infrastructure.models.respuesta_solicitud_model",
        "description": "app.infrastructure.models.respuesta_solicitud_model",
        "peekOfCode": "class RespuestaSolicitudModel(Base):\n    __tablename__ = \"tbl_respuesta_solicitud\"\n    respuesta_solicitud_id = Column(Integer, primary_key=True, autoincrement=True)\n    created_at = Column(DateTime)\n    updated_at = Column(DateTime)\n    # Ej.: \"aprobado\", \"rechazado\", \"sin citas\", etc.\n    nombre = Column(String(100), nullable=False)\n    # Texto que se autocompleta en el modal\n    respuesta = Column(Text, nullable=False)\n    # 2 = aprobado, 3 = rechazado (FK a tbl_estado_solicitud.estado_solicitud_id)",
        "detail": "app.infrastructure.models.respuesta_solicitud_model",
        "documentation": {}
    },
    {
        "label": "SolicitudModel",
        "kind": 6,
        "importPath": "app.infrastructure.models.solicitud_model",
        "description": "app.infrastructure.models.solicitud_model",
        "peekOfCode": "class SolicitudModel(Base):\n    __tablename__ = \"tbl_solicitud\"\n    solicitud_id = Column(Integer, primary_key=True, autoincrement=True)\n    jid_id = Column(Integer, ForeignKey(\"tbl_jid.jid_id\"))\n    especialidad_id = Column(Integer, ForeignKey(\"tbl_especialidad.especialidad_id\"))\n    nombres = Column(String(100))\n    tipo_documento_id = Column(Integer, ForeignKey(\"tbl_tipo_documento.tipo_documento_id\"))\n    numero_documento = Column(String(20))\n    telefono = Column(String(20))\n    email = Column(String(100))",
        "detail": "app.infrastructure.models.solicitud_model",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "kind": 6,
        "importPath": "app.infrastructure.models.user_model",
        "description": "app.infrastructure.models.user_model",
        "peekOfCode": "class TipoUsuario(Base):\n    __tablename__ = \"tbl_tipo_usuario\"\n    tipo_usuario_id = Column(Integer, primary_key=True, autoincrement=True)\n    created_at = Column(DateTime)\n    updated_at = Column(DateTime)\n    nombre = Column(String(50))\n    estado = Column(String(10))\n    usuarios = relationship(\"Usuario\", back_populates=\"tipo_usuario\")\nclass Usuario(Base):\n    __tablename__ = \"tbl_usuario\"",
        "detail": "app.infrastructure.models.user_model",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "app.infrastructure.models.user_model",
        "description": "app.infrastructure.models.user_model",
        "peekOfCode": "class Usuario(Base):\n    __tablename__ = \"tbl_usuario\"\n    usuario_id = Column(Integer, primary_key=True, autoincrement=True)\n    created_at = Column(DateTime, default=datetime.now, nullable=False)\n    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now, nullable=False)\n    usuario = Column(String(50))\n    contrasena = Column(String(255))\n    nombres = Column(String(100))\n    ap_paterno = Column(String(50))\n    ap_materno = Column(String(50))",
        "detail": "app.infrastructure.models.user_model",
        "documentation": {}
    },
    {
        "label": "AuthRepositoryImpl",
        "kind": 6,
        "importPath": "app.infrastructure.repositories.auth.auth_repository_impl",
        "description": "app.infrastructure.repositories.auth.auth_repository_impl",
        "peekOfCode": "class AuthRepositoryImpl(AuthRepository):\n    def get_by_username(self, username: str) -> Optional[Auth]:\n        with SessionLocal() as db:\n            user_row = db.query(Usuario).filter(Usuario.usuario == username).first()\n            if user_row:\n                return Auth(\n                    usuario_id=user_row.usuario_id,\n                    usuario=user_row.usuario,\n                    contrasena=user_row.contrasena,\n                )",
        "detail": "app.infrastructure.repositories.auth.auth_repository_impl",
        "documentation": {}
    },
    {
        "label": "RespuestaSolicitudRepositoryImpl",
        "kind": 6,
        "importPath": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "description": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "peekOfCode": "class RespuestaSolicitudRepositoryImpl(RespuestaSolicitudRepository):\n    def listar_por_estado(self, estado_solicitud_id: int) -> List[RespuestaSolicitud]:\n        with SessionLocal() as db:\n            registros = (\n                db.query(RespuestaSolicitudModel)\n                .filter(RespuestaSolicitudModel.estado_solicitud_id == estado_solicitud_id)\n                .all()\n            )\n            return [\n                RespuestaSolicitud(",
        "detail": "app.infrastructure.repositories.solicitud.respuesta_solicitud_repository_impl",
        "documentation": {}
    },
    {
        "label": "SolicitudRepositoryImpl",
        "kind": 6,
        "importPath": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "description": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "peekOfCode": "class SolicitudRepositoryImpl(SolicitudRepository):\n    def listar_filtrado(\n        self,\n        nombre: Optional[str] = None,\n        fecha_inicio: Optional[datetime] = None,\n        fecha_fin: Optional[datetime] = None,\n        atendidos: Optional[bool] = None,\n        page: int = 1,\n        per_page: int = 10,\n    ) -> Tuple[List[Solicitud], int]:",
        "detail": "app.infrastructure.repositories.solicitud.solicitud_repository_impl",
        "documentation": {}
    },
    {
        "label": "TipoUsuarioRepositoryImpl",
        "kind": 6,
        "importPath": "app.infrastructure.repositories.user.usuario_repository_impl",
        "description": "app.infrastructure.repositories.user.usuario_repository_impl",
        "peekOfCode": "class TipoUsuarioRepositoryImpl(TipoUsuarioRepository):\n    def get_all(self) -> List[TipoUsuario]:\n        with SessionLocal() as db:\n            rows = db.query(TipoUsuarioModel).all()\n            return [\n                TipoUsuario(tipo_usuario_id=row.tipo_usuario_id, nombre=row.nombre)\n                for row in rows\n            ]\nclass UserRepositoryImpl(UserRepository):\n    def create_user(self, user: User) -> User:",
        "detail": "app.infrastructure.repositories.user.usuario_repository_impl",
        "documentation": {}
    },
    {
        "label": "UserRepositoryImpl",
        "kind": 6,
        "importPath": "app.infrastructure.repositories.user.usuario_repository_impl",
        "description": "app.infrastructure.repositories.user.usuario_repository_impl",
        "peekOfCode": "class UserRepositoryImpl(UserRepository):\n    def create_user(self, user: User) -> User:\n        print(\"Insertando usuario en DB\")\n        with SessionLocal() as db:\n            new_user = UsuarioModel(\n                nombres=user.nombres,\n                ap_paterno=user.ap_paterno,\n                ap_materno=user.ap_materno,\n                usuario=user.usuario,\n                contrasena=user.contrasena,",
        "detail": "app.infrastructure.repositories.user.usuario_repository_impl",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "def login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\") \n        password = request.form.get(\"password\")\n        try:\n            user = login_use_case.execute(username, password) \n            session[\"user_id\"] = user.usuario_id\n            session[\"username\"] = user.usuario  \n            return redirect(url_for(\"auth.dashboard\"))\n        except ValueError as e:",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "def dashboard():\n    return render_template(\"dashboard.html\")\n@auth_bp.route(\"/logout\", methods=[\"GET\"])\ndef logout():\n    session.clear()\n    return redirect(url_for(\"auth.login\"))",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "def logout():\n    session.clear()\n    return redirect(url_for(\"auth.login\"))",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "auth_bp = Blueprint(\"auth\", __name__, template_folder=\"../templates\")\n# Instancias compartidas\nauth_repository = AuthRepositoryImpl()\npassword_hasher = PasswordHasher()\nlogin_use_case = LoginUser(auth_repository, password_hasher)\n@auth_bp.route(\"/login\", methods=[\"GET\", \"POST\"])\n@isLoginReady\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\") ",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "auth_repository",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "auth_repository = AuthRepositoryImpl()\npassword_hasher = PasswordHasher()\nlogin_use_case = LoginUser(auth_repository, password_hasher)\n@auth_bp.route(\"/login\", methods=[\"GET\", \"POST\"])\n@isLoginReady\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\") \n        password = request.form.get(\"password\")\n        try:",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "password_hasher",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "password_hasher = PasswordHasher()\nlogin_use_case = LoginUser(auth_repository, password_hasher)\n@auth_bp.route(\"/login\", methods=[\"GET\", \"POST\"])\n@isLoginReady\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\") \n        password = request.form.get(\"password\")\n        try:\n            user = login_use_case.execute(username, password) ",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "login_use_case",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.auth_routes",
        "description": "app.infrastructure.web.routes.auth_routes",
        "peekOfCode": "login_use_case = LoginUser(auth_repository, password_hasher)\n@auth_bp.route(\"/login\", methods=[\"GET\", \"POST\"])\n@isLoginReady\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\") \n        password = request.form.get(\"password\")\n        try:\n            user = login_use_case.execute(username, password) \n            session[\"user_id\"] = user.usuario_id",
        "detail": "app.infrastructure.web.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "listar_solicitudes",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "def listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")\n    fecha_fin_str = request.args.get(\"fecha_fin\")\n    atendidos = request.args.get(\"atendidos\")\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 10)) \n    fecha_inicio = (\n        datetime.strptime(fecha_inicio_str, \"%Y-%m-%d\") if fecha_inicio_str else None\n    )",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "aprobar",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "def aprobar(solicitud_id: int):\n    usuario_actual = session.get(\"username\")\n    mensaje = request.form.get(\"mensaje\", \"\").strip()\n    destinatario = request.form.get(\"destinatario\", \"\").strip()\n    image_data = request.form.get(\"image_data\")\n    try:\n        solicitud_service.aprobar(solicitud_id, usuario_actual)\n        if destinatario and mensaje:\n            send_email(\n                to=destinatario,",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "desaprobar",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "def desaprobar(solicitud_id: int):\n    usuario_actual = session.get(\"username\")\n    mensaje = request.form.get(\"mensaje\", \"\").strip()\n    destinatario = request.form.get(\"destinatario\", \"\").strip()\n    image_data = request.form.get(\"image_data\")\n    try:\n        # 1) Actualiza estado en BD\n        solicitud_service.desaprobar(solicitud_id, usuario_actual)\n        # 2) Envía email si hay destinatario y mensaje\n        if destinatario and mensaje:",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "solicitudes_bp",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "solicitudes_bp = Blueprint(\"solicitudes\", __name__)\nrepo = SolicitudRepositoryImpl()\nsolicitud_service = SolicitudService(repo)\nrespuesta_repo = RespuestaSolicitudRepositoryImpl()\nrespuesta_service = RespuestaSolicitudService(respuesta_repo)\n@solicitudes_bp.route(\"/solicitudes\", methods=[\"GET\"])\n@login_required\ndef listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "repo",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "repo = SolicitudRepositoryImpl()\nsolicitud_service = SolicitudService(repo)\nrespuesta_repo = RespuestaSolicitudRepositoryImpl()\nrespuesta_service = RespuestaSolicitudService(respuesta_repo)\n@solicitudes_bp.route(\"/solicitudes\", methods=[\"GET\"])\n@login_required\ndef listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")\n    fecha_fin_str = request.args.get(\"fecha_fin\")",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "solicitud_service",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "solicitud_service = SolicitudService(repo)\nrespuesta_repo = RespuestaSolicitudRepositoryImpl()\nrespuesta_service = RespuestaSolicitudService(respuesta_repo)\n@solicitudes_bp.route(\"/solicitudes\", methods=[\"GET\"])\n@login_required\ndef listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")\n    fecha_fin_str = request.args.get(\"fecha_fin\")\n    atendidos = request.args.get(\"atendidos\")",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "respuesta_repo",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "respuesta_repo = RespuestaSolicitudRepositoryImpl()\nrespuesta_service = RespuestaSolicitudService(respuesta_repo)\n@solicitudes_bp.route(\"/solicitudes\", methods=[\"GET\"])\n@login_required\ndef listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")\n    fecha_fin_str = request.args.get(\"fecha_fin\")\n    atendidos = request.args.get(\"atendidos\")\n    page = int(request.args.get(\"page\", 1))",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "respuesta_service",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.solicitud_routes",
        "description": "app.infrastructure.web.routes.solicitud_routes",
        "peekOfCode": "respuesta_service = RespuestaSolicitudService(respuesta_repo)\n@solicitudes_bp.route(\"/solicitudes\", methods=[\"GET\"])\n@login_required\ndef listar_solicitudes():\n    nombre = request.args.get(\"nombre\")\n    fecha_inicio_str = request.args.get(\"fecha_inicio\")\n    fecha_fin_str = request.args.get(\"fecha_fin\")\n    atendidos = request.args.get(\"atendidos\")\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 10)) ",
        "detail": "app.infrastructure.web.routes.solicitud_routes",
        "documentation": {}
    },
    {
        "label": "user_create",
        "kind": 2,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "def user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")\n        ap_paterno = request.form.get(\"ap_paterno\")\n        ap_materno = request.form.get(\"ap_materno\")\n        usuario = request.form.get(\"usuario\")\n        contrasena = request.form.get(\"contrasena\")\n        repetir_contrasena = request.form.get(\"repetir_contrasena\")\n        tipo_usuario_id = int(request.form.get(\"tipo_usuario\"))\n        # validacion de la contraseña",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "user_bp",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "user_bp = Blueprint(\"user\", import_name=__name__, template_folder=\"../templates\")\n# Instancias compartidas\npassword_hasher = PasswordHasher()\ntipo_usuario_repository = TipoUsuarioRepositoryImpl()\nuser_repository = UserRepositoryImpl()\nlistar_tipos_usuario = TypeUserServices(tipo_usuario_repository)\nuser_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "password_hasher",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "password_hasher = PasswordHasher()\ntipo_usuario_repository = TipoUsuarioRepositoryImpl()\nuser_repository = UserRepositoryImpl()\nlistar_tipos_usuario = TypeUserServices(tipo_usuario_repository)\nuser_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "tipo_usuario_repository",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "tipo_usuario_repository = TipoUsuarioRepositoryImpl()\nuser_repository = UserRepositoryImpl()\nlistar_tipos_usuario = TypeUserServices(tipo_usuario_repository)\nuser_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")\n        ap_paterno = request.form.get(\"ap_paterno\")",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "user_repository",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "user_repository = UserRepositoryImpl()\nlistar_tipos_usuario = TypeUserServices(tipo_usuario_repository)\nuser_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")\n        ap_paterno = request.form.get(\"ap_paterno\")\n        ap_materno = request.form.get(\"ap_materno\")",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "listar_tipos_usuario",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "listar_tipos_usuario = TypeUserServices(tipo_usuario_repository)\nuser_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")\n        ap_paterno = request.form.get(\"ap_paterno\")\n        ap_materno = request.form.get(\"ap_materno\")\n        usuario = request.form.get(\"usuario\")",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "user_services",
        "kind": 5,
        "importPath": "app.infrastructure.web.routes.user_routes",
        "description": "app.infrastructure.web.routes.user_routes",
        "peekOfCode": "user_services = UserServices(user_repository, password_hasher)\n@user_bp.route(\"/user\", methods=[\"GET\", \"POST\"])\n@login_required\ndef user_create():\n    if request.method == \"POST\":\n        nombres = request.form.get(\"nombres\")\n        ap_paterno = request.form.get(\"ap_paterno\")\n        ap_materno = request.form.get(\"ap_materno\")\n        usuario = request.form.get(\"usuario\")\n        contrasena = request.form.get(\"contrasena\")",
        "detail": "app.infrastructure.web.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.secret_key = \"123456789\"\n# Config Flask-Mail\napp.config.update(\n    MAIL_SERVER=settings.SMTP_HOST,\n    MAIL_PORT=settings.SMTP_PORT,\n    MAIL_USE_TLS=settings.SMTP_USE_TLS,\n    MAIL_USERNAME=settings.SMTP_USER,\n    MAIL_PASSWORD=settings.SMTP_PASS,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = \"123456789\"\n# Config Flask-Mail\napp.config.update(\n    MAIL_SERVER=settings.SMTP_HOST,\n    MAIL_PORT=settings.SMTP_PORT,\n    MAIL_USE_TLS=settings.SMTP_USE_TLS,\n    MAIL_USERNAME=settings.SMTP_USER,\n    MAIL_PASSWORD=settings.SMTP_PASS,\n    MAIL_DEFAULT_SENDER=settings.SMTP_FROM,\n)",
        "detail": "app",
        "documentation": {}
    }
]